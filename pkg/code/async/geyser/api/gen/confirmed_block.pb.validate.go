// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: confirmed_block.proto

package geyser

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConfirmedBlock with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfirmedBlock) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmedBlock with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfirmedBlockMultiError,
// or nil if none found.
func (m *ConfirmedBlock) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmedBlock) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreviousBlockhash

	// no validation rules for Blockhash

	// no validation rules for ParentSlot

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfirmedBlockValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfirmedBlockValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfirmedBlockValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfirmedBlockValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfirmedBlockValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfirmedBlockValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetBlockTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfirmedBlockValidationError{
					field:  "BlockTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfirmedBlockValidationError{
					field:  "BlockTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfirmedBlockValidationError{
				field:  "BlockTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBlockHeight()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfirmedBlockValidationError{
					field:  "BlockHeight",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfirmedBlockValidationError{
					field:  "BlockHeight",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockHeight()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfirmedBlockValidationError{
				field:  "BlockHeight",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNumPartitions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfirmedBlockValidationError{
					field:  "NumPartitions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfirmedBlockValidationError{
					field:  "NumPartitions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNumPartitions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfirmedBlockValidationError{
				field:  "NumPartitions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfirmedBlockMultiError(errors)
	}

	return nil
}

// ConfirmedBlockMultiError is an error wrapping multiple validation errors
// returned by ConfirmedBlock.ValidateAll() if the designated constraints
// aren't met.
type ConfirmedBlockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmedBlockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmedBlockMultiError) AllErrors() []error { return m }

// ConfirmedBlockValidationError is the validation error returned by
// ConfirmedBlock.Validate if the designated constraints aren't met.
type ConfirmedBlockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmedBlockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmedBlockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmedBlockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmedBlockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmedBlockValidationError) ErrorName() string { return "ConfirmedBlockValidationError" }

// Error satisfies the builtin error interface
func (e ConfirmedBlockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmedBlock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmedBlockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmedBlockValidationError{}

// Validate checks the field values on ConfirmedTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmedTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmedTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmedTransactionMultiError, or nil if none found.
func (m *ConfirmedTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmedTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfirmedTransactionValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfirmedTransactionValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfirmedTransactionValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfirmedTransactionValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfirmedTransactionValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfirmedTransactionValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfirmedTransactionMultiError(errors)
	}

	return nil
}

// ConfirmedTransactionMultiError is an error wrapping multiple validation
// errors returned by ConfirmedTransaction.ValidateAll() if the designated
// constraints aren't met.
type ConfirmedTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmedTransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmedTransactionMultiError) AllErrors() []error { return m }

// ConfirmedTransactionValidationError is the validation error returned by
// ConfirmedTransaction.Validate if the designated constraints aren't met.
type ConfirmedTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmedTransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmedTransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmedTransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmedTransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmedTransactionValidationError) ErrorName() string {
	return "ConfirmedTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmedTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmedTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmedTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmedTransactionValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionMultiError, or
// nil if none found.
func (m *Transaction) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionMultiError(errors)
	}

	return nil
}

// TransactionMultiError is an error wrapping multiple validation errors
// returned by Transaction.ValidateAll() if the designated constraints aren't met.
type TransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionMultiError) AllErrors() []error { return m }

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RecentBlockhash

	for idx, item := range m.GetInstructions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  fmt.Sprintf("Instructions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  fmt.Sprintf("Instructions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  fmt.Sprintf("Instructions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Versioned

	for idx, item := range m.GetAddressTableLookups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  fmt.Sprintf("AddressTableLookups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  fmt.Sprintf("AddressTableLookups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  fmt.Sprintf("AddressTableLookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on MessageHeader with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageHeader with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageHeaderMultiError, or
// nil if none found.
func (m *MessageHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumRequiredSignatures

	// no validation rules for NumReadonlySignedAccounts

	// no validation rules for NumReadonlyUnsignedAccounts

	if len(errors) > 0 {
		return MessageHeaderMultiError(errors)
	}

	return nil
}

// MessageHeaderMultiError is an error wrapping multiple validation errors
// returned by MessageHeader.ValidateAll() if the designated constraints
// aren't met.
type MessageHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageHeaderMultiError) AllErrors() []error { return m }

// MessageHeaderValidationError is the validation error returned by
// MessageHeader.Validate if the designated constraints aren't met.
type MessageHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageHeaderValidationError) ErrorName() string { return "MessageHeaderValidationError" }

// Error satisfies the builtin error interface
func (e MessageHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageHeaderValidationError{}

// Validate checks the field values on MessageAddressTableLookup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageAddressTableLookup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageAddressTableLookup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageAddressTableLookupMultiError, or nil if none found.
func (m *MessageAddressTableLookup) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageAddressTableLookup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountKey

	// no validation rules for WritableIndexes

	// no validation rules for ReadonlyIndexes

	if len(errors) > 0 {
		return MessageAddressTableLookupMultiError(errors)
	}

	return nil
}

// MessageAddressTableLookupMultiError is an error wrapping multiple validation
// errors returned by MessageAddressTableLookup.ValidateAll() if the
// designated constraints aren't met.
type MessageAddressTableLookupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageAddressTableLookupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageAddressTableLookupMultiError) AllErrors() []error { return m }

// MessageAddressTableLookupValidationError is the validation error returned by
// MessageAddressTableLookup.Validate if the designated constraints aren't met.
type MessageAddressTableLookupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageAddressTableLookupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageAddressTableLookupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageAddressTableLookupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageAddressTableLookupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageAddressTableLookupValidationError) ErrorName() string {
	return "MessageAddressTableLookupValidationError"
}

// Error satisfies the builtin error interface
func (e MessageAddressTableLookupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageAddressTableLookup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageAddressTableLookupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageAddressTableLookupValidationError{}

// Validate checks the field values on TransactionStatusMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionStatusMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionStatusMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionStatusMetaMultiError, or nil if none found.
func (m *TransactionStatusMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionStatusMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetErr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionStatusMetaValidationError{
					field:  "Err",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionStatusMetaValidationError{
					field:  "Err",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionStatusMetaValidationError{
				field:  "Err",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Fee

	for idx, item := range m.GetInnerInstructions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionStatusMetaValidationError{
						field:  fmt.Sprintf("InnerInstructions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionStatusMetaValidationError{
						field:  fmt.Sprintf("InnerInstructions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionStatusMetaValidationError{
					field:  fmt.Sprintf("InnerInstructions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for InnerInstructionsNone

	// no validation rules for LogMessagesNone

	for idx, item := range m.GetPreTokenBalances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionStatusMetaValidationError{
						field:  fmt.Sprintf("PreTokenBalances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionStatusMetaValidationError{
						field:  fmt.Sprintf("PreTokenBalances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionStatusMetaValidationError{
					field:  fmt.Sprintf("PreTokenBalances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPostTokenBalances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionStatusMetaValidationError{
						field:  fmt.Sprintf("PostTokenBalances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionStatusMetaValidationError{
						field:  fmt.Sprintf("PostTokenBalances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionStatusMetaValidationError{
					field:  fmt.Sprintf("PostTokenBalances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionStatusMetaValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionStatusMetaValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionStatusMetaValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetReturnData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionStatusMetaValidationError{
					field:  "ReturnData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionStatusMetaValidationError{
					field:  "ReturnData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReturnData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionStatusMetaValidationError{
				field:  "ReturnData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReturnDataNone

	if m.ComputeUnitsConsumed != nil {
		// no validation rules for ComputeUnitsConsumed
	}

	if len(errors) > 0 {
		return TransactionStatusMetaMultiError(errors)
	}

	return nil
}

// TransactionStatusMetaMultiError is an error wrapping multiple validation
// errors returned by TransactionStatusMeta.ValidateAll() if the designated
// constraints aren't met.
type TransactionStatusMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionStatusMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionStatusMetaMultiError) AllErrors() []error { return m }

// TransactionStatusMetaValidationError is the validation error returned by
// TransactionStatusMeta.Validate if the designated constraints aren't met.
type TransactionStatusMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionStatusMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionStatusMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionStatusMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionStatusMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionStatusMetaValidationError) ErrorName() string {
	return "TransactionStatusMetaValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionStatusMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionStatusMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionStatusMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionStatusMetaValidationError{}

// Validate checks the field values on TransactionError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionErrorMultiError, or nil if none found.
func (m *TransactionError) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Err

	if len(errors) > 0 {
		return TransactionErrorMultiError(errors)
	}

	return nil
}

// TransactionErrorMultiError is an error wrapping multiple validation errors
// returned by TransactionError.ValidateAll() if the designated constraints
// aren't met.
type TransactionErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionErrorMultiError) AllErrors() []error { return m }

// TransactionErrorValidationError is the validation error returned by
// TransactionError.Validate if the designated constraints aren't met.
type TransactionErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionErrorValidationError) ErrorName() string { return "TransactionErrorValidationError" }

// Error satisfies the builtin error interface
func (e TransactionErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionErrorValidationError{}

// Validate checks the field values on InnerInstructions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InnerInstructions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InnerInstructions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InnerInstructionsMultiError, or nil if none found.
func (m *InnerInstructions) ValidateAll() error {
	return m.validate(true)
}

func (m *InnerInstructions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	for idx, item := range m.GetInstructions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InnerInstructionsValidationError{
						field:  fmt.Sprintf("Instructions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InnerInstructionsValidationError{
						field:  fmt.Sprintf("Instructions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InnerInstructionsValidationError{
					field:  fmt.Sprintf("Instructions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InnerInstructionsMultiError(errors)
	}

	return nil
}

// InnerInstructionsMultiError is an error wrapping multiple validation errors
// returned by InnerInstructions.ValidateAll() if the designated constraints
// aren't met.
type InnerInstructionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InnerInstructionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InnerInstructionsMultiError) AllErrors() []error { return m }

// InnerInstructionsValidationError is the validation error returned by
// InnerInstructions.Validate if the designated constraints aren't met.
type InnerInstructionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InnerInstructionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InnerInstructionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InnerInstructionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InnerInstructionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InnerInstructionsValidationError) ErrorName() string {
	return "InnerInstructionsValidationError"
}

// Error satisfies the builtin error interface
func (e InnerInstructionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInnerInstructions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InnerInstructionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InnerInstructionsValidationError{}

// Validate checks the field values on InnerInstruction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InnerInstruction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InnerInstruction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InnerInstructionMultiError, or nil if none found.
func (m *InnerInstruction) ValidateAll() error {
	return m.validate(true)
}

func (m *InnerInstruction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramIdIndex

	// no validation rules for Accounts

	// no validation rules for Data

	if m.StackHeight != nil {
		// no validation rules for StackHeight
	}

	if len(errors) > 0 {
		return InnerInstructionMultiError(errors)
	}

	return nil
}

// InnerInstructionMultiError is an error wrapping multiple validation errors
// returned by InnerInstruction.ValidateAll() if the designated constraints
// aren't met.
type InnerInstructionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InnerInstructionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InnerInstructionMultiError) AllErrors() []error { return m }

// InnerInstructionValidationError is the validation error returned by
// InnerInstruction.Validate if the designated constraints aren't met.
type InnerInstructionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InnerInstructionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InnerInstructionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InnerInstructionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InnerInstructionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InnerInstructionValidationError) ErrorName() string { return "InnerInstructionValidationError" }

// Error satisfies the builtin error interface
func (e InnerInstructionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInnerInstruction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InnerInstructionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InnerInstructionValidationError{}

// Validate checks the field values on CompiledInstruction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompiledInstruction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompiledInstruction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompiledInstructionMultiError, or nil if none found.
func (m *CompiledInstruction) ValidateAll() error {
	return m.validate(true)
}

func (m *CompiledInstruction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramIdIndex

	// no validation rules for Accounts

	// no validation rules for Data

	if len(errors) > 0 {
		return CompiledInstructionMultiError(errors)
	}

	return nil
}

// CompiledInstructionMultiError is an error wrapping multiple validation
// errors returned by CompiledInstruction.ValidateAll() if the designated
// constraints aren't met.
type CompiledInstructionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompiledInstructionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompiledInstructionMultiError) AllErrors() []error { return m }

// CompiledInstructionValidationError is the validation error returned by
// CompiledInstruction.Validate if the designated constraints aren't met.
type CompiledInstructionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompiledInstructionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompiledInstructionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompiledInstructionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompiledInstructionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompiledInstructionValidationError) ErrorName() string {
	return "CompiledInstructionValidationError"
}

// Error satisfies the builtin error interface
func (e CompiledInstructionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompiledInstruction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompiledInstructionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompiledInstructionValidationError{}

// Validate checks the field values on TokenBalance with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenBalance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenBalance with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenBalanceMultiError, or
// nil if none found.
func (m *TokenBalance) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenBalance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountIndex

	// no validation rules for Mint

	if all {
		switch v := interface{}(m.GetUiTokenAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenBalanceValidationError{
					field:  "UiTokenAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenBalanceValidationError{
					field:  "UiTokenAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUiTokenAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenBalanceValidationError{
				field:  "UiTokenAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Owner

	// no validation rules for ProgramId

	if len(errors) > 0 {
		return TokenBalanceMultiError(errors)
	}

	return nil
}

// TokenBalanceMultiError is an error wrapping multiple validation errors
// returned by TokenBalance.ValidateAll() if the designated constraints aren't met.
type TokenBalanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenBalanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenBalanceMultiError) AllErrors() []error { return m }

// TokenBalanceValidationError is the validation error returned by
// TokenBalance.Validate if the designated constraints aren't met.
type TokenBalanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenBalanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenBalanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenBalanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenBalanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenBalanceValidationError) ErrorName() string { return "TokenBalanceValidationError" }

// Error satisfies the builtin error interface
func (e TokenBalanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenBalance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenBalanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenBalanceValidationError{}

// Validate checks the field values on UiTokenAmount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UiTokenAmount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UiTokenAmount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UiTokenAmountMultiError, or
// nil if none found.
func (m *UiTokenAmount) ValidateAll() error {
	return m.validate(true)
}

func (m *UiTokenAmount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UiAmount

	// no validation rules for Decimals

	// no validation rules for Amount

	// no validation rules for UiAmountString

	if len(errors) > 0 {
		return UiTokenAmountMultiError(errors)
	}

	return nil
}

// UiTokenAmountMultiError is an error wrapping multiple validation errors
// returned by UiTokenAmount.ValidateAll() if the designated constraints
// aren't met.
type UiTokenAmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UiTokenAmountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UiTokenAmountMultiError) AllErrors() []error { return m }

// UiTokenAmountValidationError is the validation error returned by
// UiTokenAmount.Validate if the designated constraints aren't met.
type UiTokenAmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UiTokenAmountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UiTokenAmountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UiTokenAmountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UiTokenAmountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UiTokenAmountValidationError) ErrorName() string { return "UiTokenAmountValidationError" }

// Error satisfies the builtin error interface
func (e UiTokenAmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUiTokenAmount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UiTokenAmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UiTokenAmountValidationError{}

// Validate checks the field values on ReturnData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReturnData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReturnDataMultiError, or
// nil if none found.
func (m *ReturnData) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramId

	// no validation rules for Data

	if len(errors) > 0 {
		return ReturnDataMultiError(errors)
	}

	return nil
}

// ReturnDataMultiError is an error wrapping multiple validation errors
// returned by ReturnData.ValidateAll() if the designated constraints aren't met.
type ReturnDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnDataMultiError) AllErrors() []error { return m }

// ReturnDataValidationError is the validation error returned by
// ReturnData.Validate if the designated constraints aren't met.
type ReturnDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnDataValidationError) ErrorName() string { return "ReturnDataValidationError" }

// Error satisfies the builtin error interface
func (e ReturnDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnDataValidationError{}

// Validate checks the field values on Reward with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reward) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reward with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RewardMultiError, or nil if none found.
func (m *Reward) ValidateAll() error {
	return m.validate(true)
}

func (m *Reward) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pubkey

	// no validation rules for Lamports

	// no validation rules for PostBalance

	// no validation rules for RewardType

	// no validation rules for Commission

	if len(errors) > 0 {
		return RewardMultiError(errors)
	}

	return nil
}

// RewardMultiError is an error wrapping multiple validation errors returned by
// Reward.ValidateAll() if the designated constraints aren't met.
type RewardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardMultiError) AllErrors() []error { return m }

// RewardValidationError is the validation error returned by Reward.Validate if
// the designated constraints aren't met.
type RewardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardValidationError) ErrorName() string { return "RewardValidationError" }

// Error satisfies the builtin error interface
func (e RewardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReward.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardValidationError{}

// Validate checks the field values on Rewards with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Rewards) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rewards with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RewardsMultiError, or nil if none found.
func (m *Rewards) ValidateAll() error {
	return m.validate(true)
}

func (m *Rewards) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RewardsValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RewardsValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RewardsValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNumPartitions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RewardsValidationError{
					field:  "NumPartitions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RewardsValidationError{
					field:  "NumPartitions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNumPartitions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RewardsValidationError{
				field:  "NumPartitions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RewardsMultiError(errors)
	}

	return nil
}

// RewardsMultiError is an error wrapping multiple validation errors returned
// by Rewards.ValidateAll() if the designated constraints aren't met.
type RewardsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardsMultiError) AllErrors() []error { return m }

// RewardsValidationError is the validation error returned by Rewards.Validate
// if the designated constraints aren't met.
type RewardsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardsValidationError) ErrorName() string { return "RewardsValidationError" }

// Error satisfies the builtin error interface
func (e RewardsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewards.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardsValidationError{}

// Validate checks the field values on UnixTimestamp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnixTimestamp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnixTimestamp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnixTimestampMultiError, or
// nil if none found.
func (m *UnixTimestamp) ValidateAll() error {
	return m.validate(true)
}

func (m *UnixTimestamp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return UnixTimestampMultiError(errors)
	}

	return nil
}

// UnixTimestampMultiError is an error wrapping multiple validation errors
// returned by UnixTimestamp.ValidateAll() if the designated constraints
// aren't met.
type UnixTimestampMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnixTimestampMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnixTimestampMultiError) AllErrors() []error { return m }

// UnixTimestampValidationError is the validation error returned by
// UnixTimestamp.Validate if the designated constraints aren't met.
type UnixTimestampValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnixTimestampValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnixTimestampValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnixTimestampValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnixTimestampValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnixTimestampValidationError) ErrorName() string { return "UnixTimestampValidationError" }

// Error satisfies the builtin error interface
func (e UnixTimestampValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnixTimestamp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnixTimestampValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnixTimestampValidationError{}

// Validate checks the field values on BlockHeight with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockHeight) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockHeight with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockHeightMultiError, or
// nil if none found.
func (m *BlockHeight) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockHeight) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlockHeight

	if len(errors) > 0 {
		return BlockHeightMultiError(errors)
	}

	return nil
}

// BlockHeightMultiError is an error wrapping multiple validation errors
// returned by BlockHeight.ValidateAll() if the designated constraints aren't met.
type BlockHeightMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockHeightMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockHeightMultiError) AllErrors() []error { return m }

// BlockHeightValidationError is the validation error returned by
// BlockHeight.Validate if the designated constraints aren't met.
type BlockHeightValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockHeightValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockHeightValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockHeightValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockHeightValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockHeightValidationError) ErrorName() string { return "BlockHeightValidationError" }

// Error satisfies the builtin error interface
func (e BlockHeightValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockHeight.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockHeightValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockHeightValidationError{}

// Validate checks the field values on NumPartitions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NumPartitions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumPartitions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NumPartitionsMultiError, or
// nil if none found.
func (m *NumPartitions) ValidateAll() error {
	return m.validate(true)
}

func (m *NumPartitions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumPartitions

	if len(errors) > 0 {
		return NumPartitionsMultiError(errors)
	}

	return nil
}

// NumPartitionsMultiError is an error wrapping multiple validation errors
// returned by NumPartitions.ValidateAll() if the designated constraints
// aren't met.
type NumPartitionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumPartitionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumPartitionsMultiError) AllErrors() []error { return m }

// NumPartitionsValidationError is the validation error returned by
// NumPartitions.Validate if the designated constraints aren't met.
type NumPartitionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumPartitionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumPartitionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumPartitionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumPartitionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumPartitionsValidationError) ErrorName() string { return "NumPartitionsValidationError" }

// Error satisfies the builtin error interface
func (e NumPartitionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumPartitions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumPartitionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumPartitionsValidationError{}
