// Source: https://github.com/jito-foundation/geyser-grpc-plugin/blob/v2.2/proto/proto/geyser.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: geyser.proto

package geyser

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SlotUpdateStatus int32

const (
	SlotUpdateStatus_CONFIRMED            SlotUpdateStatus = 0
	SlotUpdateStatus_PROCESSED            SlotUpdateStatus = 1
	SlotUpdateStatus_ROOTED               SlotUpdateStatus = 2
	SlotUpdateStatus_FIRST_SHRED_RECEIVED SlotUpdateStatus = 3
	SlotUpdateStatus_COMPLETED            SlotUpdateStatus = 4
	SlotUpdateStatus_CREATED_BANK         SlotUpdateStatus = 5
	SlotUpdateStatus_DEAD                 SlotUpdateStatus = 6
)

// Enum value maps for SlotUpdateStatus.
var (
	SlotUpdateStatus_name = map[int32]string{
		0: "CONFIRMED",
		1: "PROCESSED",
		2: "ROOTED",
		3: "FIRST_SHRED_RECEIVED",
		4: "COMPLETED",
		5: "CREATED_BANK",
		6: "DEAD",
	}
	SlotUpdateStatus_value = map[string]int32{
		"CONFIRMED":            0,
		"PROCESSED":            1,
		"ROOTED":               2,
		"FIRST_SHRED_RECEIVED": 3,
		"COMPLETED":            4,
		"CREATED_BANK":         5,
		"DEAD":                 6,
	}
)

func (x SlotUpdateStatus) Enum() *SlotUpdateStatus {
	p := new(SlotUpdateStatus)
	*p = x
	return p
}

func (x SlotUpdateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlotUpdateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_geyser_proto_enumTypes[0].Descriptor()
}

func (SlotUpdateStatus) Type() protoreflect.EnumType {
	return &file_geyser_proto_enumTypes[0]
}

func (x SlotUpdateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlotUpdateStatus.Descriptor instead.
func (SlotUpdateStatus) EnumDescriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{0}
}

type PartialAccountUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Slot this update occurred.
	Slot uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	// Account's pubkey.
	Pubkey []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// Account's owner.
	Owner []byte `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// Flags whether this update was streamed as part of startup, hence not a realtime update.
	IsStartup bool `protobuf:"varint,4,opt,name=is_startup,json=isStartup,proto3" json:"is_startup,omitempty"`
	// A monotonically increasing number specifying the order of this update.
	// Can be used to determine what the latest update for an account was at
	// a given slot, assuming there were multiple updates.
	Seq uint64 `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
	// Transaction signature that caused this update.
	TxSignature *string `protobuf:"bytes,6,opt,name=tx_signature,json=txSignature,proto3,oneof" json:"tx_signature,omitempty"`
	// AccountReplica version.
	ReplicaVersion uint32 `protobuf:"varint,7,opt,name=replica_version,json=replicaVersion,proto3" json:"replica_version,omitempty"`
}

func (x *PartialAccountUpdate) Reset() {
	*x = PartialAccountUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialAccountUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialAccountUpdate) ProtoMessage() {}

func (x *PartialAccountUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialAccountUpdate.ProtoReflect.Descriptor instead.
func (*PartialAccountUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{0}
}

func (x *PartialAccountUpdate) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *PartialAccountUpdate) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *PartialAccountUpdate) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *PartialAccountUpdate) GetIsStartup() bool {
	if x != nil {
		return x.IsStartup
	}
	return false
}

func (x *PartialAccountUpdate) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *PartialAccountUpdate) GetTxSignature() string {
	if x != nil && x.TxSignature != nil {
		return *x.TxSignature
	}
	return ""
}

func (x *PartialAccountUpdate) GetReplicaVersion() uint32 {
	if x != nil {
		return x.ReplicaVersion
	}
	return 0
}

type AccountUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Slot this update occurred.
	Slot uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	// Account's pubkey.
	Pubkey []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// Account's lamports post update.
	Lamports uint64 `protobuf:"varint,3,opt,name=lamports,proto3" json:"lamports,omitempty"`
	// Account's owner.
	Owner []byte `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	// Flags whether an account is executable.
	IsExecutable bool `protobuf:"varint,5,opt,name=is_executable,json=isExecutable,proto3" json:"is_executable,omitempty"`
	// The epoch at which this account will next owe rent.
	RentEpoch uint64 `protobuf:"varint,6,opt,name=rent_epoch,json=rentEpoch,proto3" json:"rent_epoch,omitempty"`
	// Account's data post update.
	Data []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	// A monotonically increasing number specifying the order of this update.
	// Can be used to determine what the latest update for an account was at
	// a given slot, assuming there were multiple updates.
	Seq uint64 `protobuf:"varint,8,opt,name=seq,proto3" json:"seq,omitempty"`
	// Flags whether this update was streamed as part of startup i.e. not a real-time update.
	IsStartup bool `protobuf:"varint,9,opt,name=is_startup,json=isStartup,proto3" json:"is_startup,omitempty"`
	// Transaction signature that caused this update.
	TxSignature *string `protobuf:"bytes,10,opt,name=tx_signature,json=txSignature,proto3,oneof" json:"tx_signature,omitempty"`
	// AccountReplica version.
	ReplicaVersion uint32 `protobuf:"varint,11,opt,name=replica_version,json=replicaVersion,proto3" json:"replica_version,omitempty"`
}

func (x *AccountUpdate) Reset() {
	*x = AccountUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUpdate) ProtoMessage() {}

func (x *AccountUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUpdate.ProtoReflect.Descriptor instead.
func (*AccountUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{1}
}

func (x *AccountUpdate) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *AccountUpdate) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *AccountUpdate) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

func (x *AccountUpdate) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *AccountUpdate) GetIsExecutable() bool {
	if x != nil {
		return x.IsExecutable
	}
	return false
}

func (x *AccountUpdate) GetRentEpoch() uint64 {
	if x != nil {
		return x.RentEpoch
	}
	return 0
}

func (x *AccountUpdate) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AccountUpdate) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *AccountUpdate) GetIsStartup() bool {
	if x != nil {
		return x.IsStartup
	}
	return false
}

func (x *AccountUpdate) GetTxSignature() string {
	if x != nil && x.TxSignature != nil {
		return *x.TxSignature
	}
	return ""
}

func (x *AccountUpdate) GetReplicaVersion() uint32 {
	if x != nil {
		return x.ReplicaVersion
	}
	return 0
}

type SlotUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot       uint64           `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentSlot *uint64          `protobuf:"varint,2,opt,name=parent_slot,json=parentSlot,proto3,oneof" json:"parent_slot,omitempty"`
	Status     SlotUpdateStatus `protobuf:"varint,3,opt,name=status,proto3,enum=solana.geyser.SlotUpdateStatus" json:"status,omitempty"`
}

func (x *SlotUpdate) Reset() {
	*x = SlotUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotUpdate) ProtoMessage() {}

func (x *SlotUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotUpdate.ProtoReflect.Descriptor instead.
func (*SlotUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{2}
}

func (x *SlotUpdate) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *SlotUpdate) GetParentSlot() uint64 {
	if x != nil && x.ParentSlot != nil {
		return *x.ParentSlot
	}
	return 0
}

func (x *SlotUpdate) GetStatus() SlotUpdateStatus {
	if x != nil {
		return x.Status
	}
	return SlotUpdateStatus_CONFIRMED
}

type TimestampedSlotUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time at which the message was generated
	Ts *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	// Slot update
	SlotUpdate *SlotUpdate `protobuf:"bytes,2,opt,name=slot_update,json=slotUpdate,proto3" json:"slot_update,omitempty"`
}

func (x *TimestampedSlotUpdate) Reset() {
	*x = TimestampedSlotUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampedSlotUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedSlotUpdate) ProtoMessage() {}

func (x *TimestampedSlotUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedSlotUpdate.ProtoReflect.Descriptor instead.
func (*TimestampedSlotUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{3}
}

func (x *TimestampedSlotUpdate) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *TimestampedSlotUpdate) GetSlotUpdate() *SlotUpdate {
	if x != nil {
		return x.SlotUpdate
	}
	return nil
}

type TimestampedAccountUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time at which the message was generated
	Ts *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	// Account update
	AccountUpdate *AccountUpdate `protobuf:"bytes,2,opt,name=account_update,json=accountUpdate,proto3" json:"account_update,omitempty"`
}

func (x *TimestampedAccountUpdate) Reset() {
	*x = TimestampedAccountUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampedAccountUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedAccountUpdate) ProtoMessage() {}

func (x *TimestampedAccountUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedAccountUpdate.ProtoReflect.Descriptor instead.
func (*TimestampedAccountUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{4}
}

func (x *TimestampedAccountUpdate) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *TimestampedAccountUpdate) GetAccountUpdate() *AccountUpdate {
	if x != nil {
		return x.AccountUpdate
	}
	return nil
}

type SubscribeTransactionUpdatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeTransactionUpdatesRequest) Reset() {
	*x = SubscribeTransactionUpdatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTransactionUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTransactionUpdatesRequest) ProtoMessage() {}

func (x *SubscribeTransactionUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTransactionUpdatesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTransactionUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{5}
}

type SubscribeBlockUpdatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeBlockUpdatesRequest) Reset() {
	*x = SubscribeBlockUpdatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeBlockUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeBlockUpdatesRequest) ProtoMessage() {}

func (x *SubscribeBlockUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeBlockUpdatesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeBlockUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{6}
}

type MaybePartialAccountUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*MaybePartialAccountUpdate_PartialAccountUpdate
	//	*MaybePartialAccountUpdate_Hb
	Msg isMaybePartialAccountUpdate_Msg `protobuf_oneof:"msg"`
}

func (x *MaybePartialAccountUpdate) Reset() {
	*x = MaybePartialAccountUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaybePartialAccountUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaybePartialAccountUpdate) ProtoMessage() {}

func (x *MaybePartialAccountUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaybePartialAccountUpdate.ProtoReflect.Descriptor instead.
func (*MaybePartialAccountUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{7}
}

func (m *MaybePartialAccountUpdate) GetMsg() isMaybePartialAccountUpdate_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *MaybePartialAccountUpdate) GetPartialAccountUpdate() *PartialAccountUpdate {
	if x, ok := x.GetMsg().(*MaybePartialAccountUpdate_PartialAccountUpdate); ok {
		return x.PartialAccountUpdate
	}
	return nil
}

func (x *MaybePartialAccountUpdate) GetHb() *Heartbeat {
	if x, ok := x.GetMsg().(*MaybePartialAccountUpdate_Hb); ok {
		return x.Hb
	}
	return nil
}

type isMaybePartialAccountUpdate_Msg interface {
	isMaybePartialAccountUpdate_Msg()
}

type MaybePartialAccountUpdate_PartialAccountUpdate struct {
	PartialAccountUpdate *PartialAccountUpdate `protobuf:"bytes,1,opt,name=partial_account_update,json=partialAccountUpdate,proto3,oneof"`
}

type MaybePartialAccountUpdate_Hb struct {
	Hb *Heartbeat `protobuf:"bytes,2,opt,name=hb,proto3,oneof"`
}

func (*MaybePartialAccountUpdate_PartialAccountUpdate) isMaybePartialAccountUpdate_Msg() {}

func (*MaybePartialAccountUpdate_Hb) isMaybePartialAccountUpdate_Msg() {}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{8}
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{9}
}

type BlockUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot                     uint64                 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Blockhash                string                 `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Rewards                  []*Reward              `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty"`
	BlockTime                *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	BlockHeight              *uint64                `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
	ExecutedTransactionCount *uint64                `protobuf:"varint,6,opt,name=executed_transaction_count,json=executedTransactionCount,proto3,oneof" json:"executed_transaction_count,omitempty"`
	EntryCount               *uint64                `protobuf:"varint,7,opt,name=entry_count,json=entryCount,proto3,oneof" json:"entry_count,omitempty"`
}

func (x *BlockUpdate) Reset() {
	*x = BlockUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUpdate) ProtoMessage() {}

func (x *BlockUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUpdate.ProtoReflect.Descriptor instead.
func (*BlockUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{10}
}

func (x *BlockUpdate) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BlockUpdate) GetBlockhash() string {
	if x != nil {
		return x.Blockhash
	}
	return ""
}

func (x *BlockUpdate) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *BlockUpdate) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *BlockUpdate) GetBlockHeight() uint64 {
	if x != nil && x.BlockHeight != nil {
		return *x.BlockHeight
	}
	return 0
}

func (x *BlockUpdate) GetExecutedTransactionCount() uint64 {
	if x != nil && x.ExecutedTransactionCount != nil {
		return *x.ExecutedTransactionCount
	}
	return 0
}

func (x *BlockUpdate) GetEntryCount() uint64 {
	if x != nil && x.EntryCount != nil {
		return *x.EntryCount
	}
	return 0
}

type TimestampedBlockUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time at which the message was generated
	Ts *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	// Block contents
	BlockUpdate *BlockUpdate `protobuf:"bytes,2,opt,name=block_update,json=blockUpdate,proto3" json:"block_update,omitempty"`
}

func (x *TimestampedBlockUpdate) Reset() {
	*x = TimestampedBlockUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampedBlockUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedBlockUpdate) ProtoMessage() {}

func (x *TimestampedBlockUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedBlockUpdate.ProtoReflect.Descriptor instead.
func (*TimestampedBlockUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{11}
}

func (x *TimestampedBlockUpdate) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *TimestampedBlockUpdate) GetBlockUpdate() *BlockUpdate {
	if x != nil {
		return x.BlockUpdate
	}
	return nil
}

type TransactionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot      uint64                `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Signature string                `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	IsVote    bool                  `protobuf:"varint,3,opt,name=is_vote,json=isVote,proto3" json:"is_vote,omitempty"`
	TxIdx     uint64                `protobuf:"varint,4,opt,name=tx_idx,json=txIdx,proto3" json:"tx_idx,omitempty"`
	Tx        *ConfirmedTransaction `protobuf:"bytes,5,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *TransactionUpdate) Reset() {
	*x = TransactionUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionUpdate) ProtoMessage() {}

func (x *TransactionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionUpdate.ProtoReflect.Descriptor instead.
func (*TransactionUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{12}
}

func (x *TransactionUpdate) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *TransactionUpdate) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *TransactionUpdate) GetIsVote() bool {
	if x != nil {
		return x.IsVote
	}
	return false
}

func (x *TransactionUpdate) GetTxIdx() uint64 {
	if x != nil {
		return x.TxIdx
	}
	return 0
}

func (x *TransactionUpdate) GetTx() *ConfirmedTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type TimestampedTransactionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Transaction *TransactionUpdate     `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TimestampedTransactionUpdate) Reset() {
	*x = TimestampedTransactionUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampedTransactionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedTransactionUpdate) ProtoMessage() {}

func (x *TimestampedTransactionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedTransactionUpdate.ProtoReflect.Descriptor instead.
func (*TimestampedTransactionUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{13}
}

func (x *TimestampedTransactionUpdate) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *TimestampedTransactionUpdate) GetTransaction() *TransactionUpdate {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type SubscribeSlotUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeSlotUpdateRequest) Reset() {
	*x = SubscribeSlotUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeSlotUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeSlotUpdateRequest) ProtoMessage() {}

func (x *SubscribeSlotUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeSlotUpdateRequest.ProtoReflect.Descriptor instead.
func (*SubscribeSlotUpdateRequest) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{14}
}

type SubscribeAccountUpdatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts [][]byte `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *SubscribeAccountUpdatesRequest) Reset() {
	*x = SubscribeAccountUpdatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeAccountUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAccountUpdatesRequest) ProtoMessage() {}

func (x *SubscribeAccountUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAccountUpdatesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeAccountUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{15}
}

func (x *SubscribeAccountUpdatesRequest) GetAccounts() [][]byte {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type SubscribeProgramsUpdatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Programs [][]byte `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs,omitempty"`
}

func (x *SubscribeProgramsUpdatesRequest) Reset() {
	*x = SubscribeProgramsUpdatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeProgramsUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeProgramsUpdatesRequest) ProtoMessage() {}

func (x *SubscribeProgramsUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeProgramsUpdatesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeProgramsUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{16}
}

func (x *SubscribeProgramsUpdatesRequest) GetPrograms() [][]byte {
	if x != nil {
		return x.Programs
	}
	return nil
}

type SubscribePartialAccountUpdatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, will not stream vote account updates.
	SkipVoteAccounts bool `protobuf:"varint,1,opt,name=skip_vote_accounts,json=skipVoteAccounts,proto3" json:"skip_vote_accounts,omitempty"`
}

func (x *SubscribePartialAccountUpdatesRequest) Reset() {
	*x = SubscribePartialAccountUpdatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribePartialAccountUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribePartialAccountUpdatesRequest) ProtoMessage() {}

func (x *SubscribePartialAccountUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribePartialAccountUpdatesRequest.ProtoReflect.Descriptor instead.
func (*SubscribePartialAccountUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{17}
}

func (x *SubscribePartialAccountUpdatesRequest) GetSkipVoteAccounts() bool {
	if x != nil {
		return x.SkipVoteAccounts
	}
	return false
}

type GetHeartbeatIntervalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartbeatIntervalMs uint64 `protobuf:"varint,1,opt,name=heartbeat_interval_ms,json=heartbeatIntervalMs,proto3" json:"heartbeat_interval_ms,omitempty"`
}

func (x *GetHeartbeatIntervalResponse) Reset() {
	*x = GetHeartbeatIntervalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeartbeatIntervalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeartbeatIntervalResponse) ProtoMessage() {}

func (x *GetHeartbeatIntervalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeartbeatIntervalResponse.ProtoReflect.Descriptor instead.
func (*GetHeartbeatIntervalResponse) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{18}
}

func (x *GetHeartbeatIntervalResponse) GetHeartbeatIntervalMs() uint64 {
	if x != nil {
		return x.HeartbeatIntervalMs
	}
	return 0
}

// / Modelled based off of https://github.com/solana-labs/solana/blob/v2.0/geyser-plugin-interface/src/geyser_plugin_interface.rs#L210
// / If more details are needed can extend this structure.
type SlotEntryUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The slot number of the block containing this Entry
	Slot uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	// The Entry's index in the block
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// The number of executed transactions in the Entry
	// If this number is zero, we can assume its a tick entry
	ExecutedTransactionCount uint64 `protobuf:"varint,3,opt,name=executed_transaction_count,json=executedTransactionCount,proto3" json:"executed_transaction_count,omitempty"`
}

func (x *SlotEntryUpdate) Reset() {
	*x = SlotEntryUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotEntryUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotEntryUpdate) ProtoMessage() {}

func (x *SlotEntryUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotEntryUpdate.ProtoReflect.Descriptor instead.
func (*SlotEntryUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{19}
}

func (x *SlotEntryUpdate) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *SlotEntryUpdate) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SlotEntryUpdate) GetExecutedTransactionCount() uint64 {
	if x != nil {
		return x.ExecutedTransactionCount
	}
	return 0
}

type TimestampedSlotEntryUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time at which the message was generated
	// Send relative timestamp in micros using u32 to reduce overhead. Provides ~71 mins of accuracy between sender and receiver
	// See [compact_timestamp::to_system_time]
	Ts uint32 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	// SlotEntryUpdate update
	EntryUpdate *SlotEntryUpdate `protobuf:"bytes,2,opt,name=entry_update,json=entryUpdate,proto3" json:"entry_update,omitempty"`
}

func (x *TimestampedSlotEntryUpdate) Reset() {
	*x = TimestampedSlotEntryUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampedSlotEntryUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedSlotEntryUpdate) ProtoMessage() {}

func (x *TimestampedSlotEntryUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedSlotEntryUpdate.ProtoReflect.Descriptor instead.
func (*TimestampedSlotEntryUpdate) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{20}
}

func (x *TimestampedSlotEntryUpdate) GetTs() uint32 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *TimestampedSlotEntryUpdate) GetEntryUpdate() *SlotEntryUpdate {
	if x != nil {
		return x.EntryUpdate
	}
	return nil
}

type SubscribeSlotEntryUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeSlotEntryUpdateRequest) Reset() {
	*x = SubscribeSlotEntryUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geyser_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeSlotEntryUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeSlotEntryUpdateRequest) ProtoMessage() {}

func (x *SubscribeSlotEntryUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geyser_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeSlotEntryUpdateRequest.ProtoReflect.Descriptor instead.
func (*SubscribeSlotEntryUpdateRequest) Descriptor() ([]byte, []int) {
	return file_geyser_proto_rawDescGZIP(), []int{21}
}

var File_geyser_proto protoreflect.FileDescriptor

var file_geyser_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0c,
	0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8f,
	0x01, 0x0a, 0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x22, 0x7f, 0x0a, 0x15, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x24, 0x0a, 0x22, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x19, 0x4d, 0x61, 0x79, 0x62, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79,
	0x73, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x02, 0x68, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x02, 0x68, 0x62, 0x42, 0x05, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x0b, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x8c, 0x03, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x18, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02,
	0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x83, 0x01, 0x0a, 0x16, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x49, 0x64, 0x78, 0x12, 0x43, 0x0a,
	0x02, 0x74, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02,
	0x74, 0x78, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x42, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65,
	0x79, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x3c, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0x3d, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x55,
	0x0a, 0x25, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x22, 0x79, 0x0a, 0x0f, 0x53, 0x6c, 0x6f,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x1a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0x81, 0x01, 0x0a, 0x10, 0x53, 0x6c, 0x6f,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x4f, 0x4f, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x53, 0x48, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x4b,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x41, 0x44, 0x10, 0x06, 0x32, 0xc0, 0x07, 0x0a,
	0x06, 0x47, 0x65, 0x79, 0x73, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x1b, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x17, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e,
	0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67,
	0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x76, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x1e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x34, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79,
	0x73, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x79, 0x62, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x6b, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65,
	0x79, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64,
	0x53, 0x6c, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x81,
	0x01, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x31,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65,
	0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x6f, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x2e, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_geyser_proto_rawDescOnce sync.Once
	file_geyser_proto_rawDescData = file_geyser_proto_rawDesc
)

func file_geyser_proto_rawDescGZIP() []byte {
	file_geyser_proto_rawDescOnce.Do(func() {
		file_geyser_proto_rawDescData = protoimpl.X.CompressGZIP(file_geyser_proto_rawDescData)
	})
	return file_geyser_proto_rawDescData
}

var file_geyser_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_geyser_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_geyser_proto_goTypes = []interface{}{
	(SlotUpdateStatus)(0),                         // 0: solana.geyser.SlotUpdateStatus
	(*PartialAccountUpdate)(nil),                  // 1: solana.geyser.PartialAccountUpdate
	(*AccountUpdate)(nil),                         // 2: solana.geyser.AccountUpdate
	(*SlotUpdate)(nil),                            // 3: solana.geyser.SlotUpdate
	(*TimestampedSlotUpdate)(nil),                 // 4: solana.geyser.TimestampedSlotUpdate
	(*TimestampedAccountUpdate)(nil),              // 5: solana.geyser.TimestampedAccountUpdate
	(*SubscribeTransactionUpdatesRequest)(nil),    // 6: solana.geyser.SubscribeTransactionUpdatesRequest
	(*SubscribeBlockUpdatesRequest)(nil),          // 7: solana.geyser.SubscribeBlockUpdatesRequest
	(*MaybePartialAccountUpdate)(nil),             // 8: solana.geyser.MaybePartialAccountUpdate
	(*Heartbeat)(nil),                             // 9: solana.geyser.Heartbeat
	(*EmptyRequest)(nil),                          // 10: solana.geyser.EmptyRequest
	(*BlockUpdate)(nil),                           // 11: solana.geyser.BlockUpdate
	(*TimestampedBlockUpdate)(nil),                // 12: solana.geyser.TimestampedBlockUpdate
	(*TransactionUpdate)(nil),                     // 13: solana.geyser.TransactionUpdate
	(*TimestampedTransactionUpdate)(nil),          // 14: solana.geyser.TimestampedTransactionUpdate
	(*SubscribeSlotUpdateRequest)(nil),            // 15: solana.geyser.SubscribeSlotUpdateRequest
	(*SubscribeAccountUpdatesRequest)(nil),        // 16: solana.geyser.SubscribeAccountUpdatesRequest
	(*SubscribeProgramsUpdatesRequest)(nil),       // 17: solana.geyser.SubscribeProgramsUpdatesRequest
	(*SubscribePartialAccountUpdatesRequest)(nil), // 18: solana.geyser.SubscribePartialAccountUpdatesRequest
	(*GetHeartbeatIntervalResponse)(nil),          // 19: solana.geyser.GetHeartbeatIntervalResponse
	(*SlotEntryUpdate)(nil),                       // 20: solana.geyser.SlotEntryUpdate
	(*TimestampedSlotEntryUpdate)(nil),            // 21: solana.geyser.TimestampedSlotEntryUpdate
	(*SubscribeSlotEntryUpdateRequest)(nil),       // 22: solana.geyser.SubscribeSlotEntryUpdateRequest
	(*timestamppb.Timestamp)(nil),                 // 23: google.protobuf.Timestamp
	(*Reward)(nil),                                // 24: solana.storage.ConfirmedBlock.Reward
	(*ConfirmedTransaction)(nil),                  // 25: solana.storage.ConfirmedBlock.ConfirmedTransaction
}
var file_geyser_proto_depIdxs = []int32{
	0,  // 0: solana.geyser.SlotUpdate.status:type_name -> solana.geyser.SlotUpdateStatus
	23, // 1: solana.geyser.TimestampedSlotUpdate.ts:type_name -> google.protobuf.Timestamp
	3,  // 2: solana.geyser.TimestampedSlotUpdate.slot_update:type_name -> solana.geyser.SlotUpdate
	23, // 3: solana.geyser.TimestampedAccountUpdate.ts:type_name -> google.protobuf.Timestamp
	2,  // 4: solana.geyser.TimestampedAccountUpdate.account_update:type_name -> solana.geyser.AccountUpdate
	1,  // 5: solana.geyser.MaybePartialAccountUpdate.partial_account_update:type_name -> solana.geyser.PartialAccountUpdate
	9,  // 6: solana.geyser.MaybePartialAccountUpdate.hb:type_name -> solana.geyser.Heartbeat
	24, // 7: solana.geyser.BlockUpdate.rewards:type_name -> solana.storage.ConfirmedBlock.Reward
	23, // 8: solana.geyser.BlockUpdate.block_time:type_name -> google.protobuf.Timestamp
	23, // 9: solana.geyser.TimestampedBlockUpdate.ts:type_name -> google.protobuf.Timestamp
	11, // 10: solana.geyser.TimestampedBlockUpdate.block_update:type_name -> solana.geyser.BlockUpdate
	25, // 11: solana.geyser.TransactionUpdate.tx:type_name -> solana.storage.ConfirmedBlock.ConfirmedTransaction
	23, // 12: solana.geyser.TimestampedTransactionUpdate.ts:type_name -> google.protobuf.Timestamp
	13, // 13: solana.geyser.TimestampedTransactionUpdate.transaction:type_name -> solana.geyser.TransactionUpdate
	20, // 14: solana.geyser.TimestampedSlotEntryUpdate.entry_update:type_name -> solana.geyser.SlotEntryUpdate
	10, // 15: solana.geyser.Geyser.GetHeartbeatInterval:input_type -> solana.geyser.EmptyRequest
	16, // 16: solana.geyser.Geyser.SubscribeAccountUpdates:input_type -> solana.geyser.SubscribeAccountUpdatesRequest
	17, // 17: solana.geyser.Geyser.SubscribeProgramUpdates:input_type -> solana.geyser.SubscribeProgramsUpdatesRequest
	18, // 18: solana.geyser.Geyser.SubscribePartialAccountUpdates:input_type -> solana.geyser.SubscribePartialAccountUpdatesRequest
	15, // 19: solana.geyser.Geyser.SubscribeSlotUpdates:input_type -> solana.geyser.SubscribeSlotUpdateRequest
	6,  // 20: solana.geyser.Geyser.SubscribeTransactionUpdates:input_type -> solana.geyser.SubscribeTransactionUpdatesRequest
	7,  // 21: solana.geyser.Geyser.SubscribeBlockUpdates:input_type -> solana.geyser.SubscribeBlockUpdatesRequest
	22, // 22: solana.geyser.Geyser.SubscribeSlotEntryUpdates:input_type -> solana.geyser.SubscribeSlotEntryUpdateRequest
	19, // 23: solana.geyser.Geyser.GetHeartbeatInterval:output_type -> solana.geyser.GetHeartbeatIntervalResponse
	5,  // 24: solana.geyser.Geyser.SubscribeAccountUpdates:output_type -> solana.geyser.TimestampedAccountUpdate
	5,  // 25: solana.geyser.Geyser.SubscribeProgramUpdates:output_type -> solana.geyser.TimestampedAccountUpdate
	8,  // 26: solana.geyser.Geyser.SubscribePartialAccountUpdates:output_type -> solana.geyser.MaybePartialAccountUpdate
	4,  // 27: solana.geyser.Geyser.SubscribeSlotUpdates:output_type -> solana.geyser.TimestampedSlotUpdate
	14, // 28: solana.geyser.Geyser.SubscribeTransactionUpdates:output_type -> solana.geyser.TimestampedTransactionUpdate
	12, // 29: solana.geyser.Geyser.SubscribeBlockUpdates:output_type -> solana.geyser.TimestampedBlockUpdate
	21, // 30: solana.geyser.Geyser.SubscribeSlotEntryUpdates:output_type -> solana.geyser.TimestampedSlotEntryUpdate
	23, // [23:31] is the sub-list for method output_type
	15, // [15:23] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_geyser_proto_init() }
func file_geyser_proto_init() {
	if File_geyser_proto != nil {
		return
	}
	file_confirmed_block_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_geyser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialAccountUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampedSlotUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampedAccountUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTransactionUpdatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeBlockUpdatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaybePartialAccountUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampedBlockUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampedTransactionUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeSlotUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeAccountUpdatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeProgramsUpdatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribePartialAccountUpdatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeartbeatIntervalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotEntryUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampedSlotEntryUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geyser_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeSlotEntryUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_geyser_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_geyser_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_geyser_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_geyser_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*MaybePartialAccountUpdate_PartialAccountUpdate)(nil),
		(*MaybePartialAccountUpdate_Hb)(nil),
	}
	file_geyser_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_geyser_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_geyser_proto_goTypes,
		DependencyIndexes: file_geyser_proto_depIdxs,
		EnumInfos:         file_geyser_proto_enumTypes,
		MessageInfos:      file_geyser_proto_msgTypes,
	}.Build()
	File_geyser_proto = out.File
	file_geyser_proto_rawDesc = nil
	file_geyser_proto_goTypes = nil
	file_geyser_proto_depIdxs = nil
}
