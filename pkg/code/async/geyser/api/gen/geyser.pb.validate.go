// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: geyser.proto

package geyser

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PartialAccountUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartialAccountUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartialAccountUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartialAccountUpdateMultiError, or nil if none found.
func (m *PartialAccountUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *PartialAccountUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slot

	// no validation rules for Pubkey

	// no validation rules for Owner

	// no validation rules for IsStartup

	// no validation rules for Seq

	// no validation rules for ReplicaVersion

	if m.TxSignature != nil {
		// no validation rules for TxSignature
	}

	if len(errors) > 0 {
		return PartialAccountUpdateMultiError(errors)
	}

	return nil
}

// PartialAccountUpdateMultiError is an error wrapping multiple validation
// errors returned by PartialAccountUpdate.ValidateAll() if the designated
// constraints aren't met.
type PartialAccountUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartialAccountUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartialAccountUpdateMultiError) AllErrors() []error { return m }

// PartialAccountUpdateValidationError is the validation error returned by
// PartialAccountUpdate.Validate if the designated constraints aren't met.
type PartialAccountUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartialAccountUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartialAccountUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartialAccountUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartialAccountUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartialAccountUpdateValidationError) ErrorName() string {
	return "PartialAccountUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e PartialAccountUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartialAccountUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartialAccountUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartialAccountUpdateValidationError{}

// Validate checks the field values on AccountUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountUpdateMultiError, or
// nil if none found.
func (m *AccountUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slot

	// no validation rules for Pubkey

	// no validation rules for Lamports

	// no validation rules for Owner

	// no validation rules for IsExecutable

	// no validation rules for RentEpoch

	// no validation rules for Data

	// no validation rules for Seq

	// no validation rules for IsStartup

	// no validation rules for ReplicaVersion

	if m.TxSignature != nil {
		// no validation rules for TxSignature
	}

	if len(errors) > 0 {
		return AccountUpdateMultiError(errors)
	}

	return nil
}

// AccountUpdateMultiError is an error wrapping multiple validation errors
// returned by AccountUpdate.ValidateAll() if the designated constraints
// aren't met.
type AccountUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountUpdateMultiError) AllErrors() []error { return m }

// AccountUpdateValidationError is the validation error returned by
// AccountUpdate.Validate if the designated constraints aren't met.
type AccountUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUpdateValidationError) ErrorName() string { return "AccountUpdateValidationError" }

// Error satisfies the builtin error interface
func (e AccountUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUpdateValidationError{}

// Validate checks the field values on SlotUpdate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SlotUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlotUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SlotUpdateMultiError, or
// nil if none found.
func (m *SlotUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *SlotUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slot

	// no validation rules for Status

	if m.ParentSlot != nil {
		// no validation rules for ParentSlot
	}

	if len(errors) > 0 {
		return SlotUpdateMultiError(errors)
	}

	return nil
}

// SlotUpdateMultiError is an error wrapping multiple validation errors
// returned by SlotUpdate.ValidateAll() if the designated constraints aren't met.
type SlotUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlotUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlotUpdateMultiError) AllErrors() []error { return m }

// SlotUpdateValidationError is the validation error returned by
// SlotUpdate.Validate if the designated constraints aren't met.
type SlotUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlotUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlotUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlotUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlotUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlotUpdateValidationError) ErrorName() string { return "SlotUpdateValidationError" }

// Error satisfies the builtin error interface
func (e SlotUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlotUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlotUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlotUpdateValidationError{}

// Validate checks the field values on TimestampedSlotUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimestampedSlotUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampedSlotUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampedSlotUpdateMultiError, or nil if none found.
func (m *TimestampedSlotUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampedSlotUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimestampedSlotUpdateValidationError{
					field:  "Ts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimestampedSlotUpdateValidationError{
					field:  "Ts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampedSlotUpdateValidationError{
				field:  "Ts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSlotUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimestampedSlotUpdateValidationError{
					field:  "SlotUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimestampedSlotUpdateValidationError{
					field:  "SlotUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlotUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampedSlotUpdateValidationError{
				field:  "SlotUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimestampedSlotUpdateMultiError(errors)
	}

	return nil
}

// TimestampedSlotUpdateMultiError is an error wrapping multiple validation
// errors returned by TimestampedSlotUpdate.ValidateAll() if the designated
// constraints aren't met.
type TimestampedSlotUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimestampedSlotUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimestampedSlotUpdateMultiError) AllErrors() []error { return m }

// TimestampedSlotUpdateValidationError is the validation error returned by
// TimestampedSlotUpdate.Validate if the designated constraints aren't met.
type TimestampedSlotUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampedSlotUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampedSlotUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampedSlotUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampedSlotUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampedSlotUpdateValidationError) ErrorName() string {
	return "TimestampedSlotUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e TimestampedSlotUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampedSlotUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampedSlotUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampedSlotUpdateValidationError{}

// Validate checks the field values on TimestampedAccountUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimestampedAccountUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampedAccountUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampedAccountUpdateMultiError, or nil if none found.
func (m *TimestampedAccountUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampedAccountUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimestampedAccountUpdateValidationError{
					field:  "Ts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimestampedAccountUpdateValidationError{
					field:  "Ts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampedAccountUpdateValidationError{
				field:  "Ts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccountUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimestampedAccountUpdateValidationError{
					field:  "AccountUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimestampedAccountUpdateValidationError{
					field:  "AccountUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccountUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampedAccountUpdateValidationError{
				field:  "AccountUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimestampedAccountUpdateMultiError(errors)
	}

	return nil
}

// TimestampedAccountUpdateMultiError is an error wrapping multiple validation
// errors returned by TimestampedAccountUpdate.ValidateAll() if the designated
// constraints aren't met.
type TimestampedAccountUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimestampedAccountUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimestampedAccountUpdateMultiError) AllErrors() []error { return m }

// TimestampedAccountUpdateValidationError is the validation error returned by
// TimestampedAccountUpdate.Validate if the designated constraints aren't met.
type TimestampedAccountUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampedAccountUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampedAccountUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampedAccountUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampedAccountUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampedAccountUpdateValidationError) ErrorName() string {
	return "TimestampedAccountUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e TimestampedAccountUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampedAccountUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampedAccountUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampedAccountUpdateValidationError{}

// Validate checks the field values on SubscribeTransactionUpdatesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SubscribeTransactionUpdatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeTransactionUpdatesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SubscribeTransactionUpdatesRequestMultiError, or nil if none found.
func (m *SubscribeTransactionUpdatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeTransactionUpdatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribeTransactionUpdatesRequestMultiError(errors)
	}

	return nil
}

// SubscribeTransactionUpdatesRequestMultiError is an error wrapping multiple
// validation errors returned by
// SubscribeTransactionUpdatesRequest.ValidateAll() if the designated
// constraints aren't met.
type SubscribeTransactionUpdatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeTransactionUpdatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeTransactionUpdatesRequestMultiError) AllErrors() []error { return m }

// SubscribeTransactionUpdatesRequestValidationError is the validation error
// returned by SubscribeTransactionUpdatesRequest.Validate if the designated
// constraints aren't met.
type SubscribeTransactionUpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeTransactionUpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeTransactionUpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeTransactionUpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeTransactionUpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeTransactionUpdatesRequestValidationError) ErrorName() string {
	return "SubscribeTransactionUpdatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeTransactionUpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeTransactionUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeTransactionUpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeTransactionUpdatesRequestValidationError{}

// Validate checks the field values on SubscribeBlockUpdatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeBlockUpdatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeBlockUpdatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeBlockUpdatesRequestMultiError, or nil if none found.
func (m *SubscribeBlockUpdatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeBlockUpdatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribeBlockUpdatesRequestMultiError(errors)
	}

	return nil
}

// SubscribeBlockUpdatesRequestMultiError is an error wrapping multiple
// validation errors returned by SubscribeBlockUpdatesRequest.ValidateAll() if
// the designated constraints aren't met.
type SubscribeBlockUpdatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeBlockUpdatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeBlockUpdatesRequestMultiError) AllErrors() []error { return m }

// SubscribeBlockUpdatesRequestValidationError is the validation error returned
// by SubscribeBlockUpdatesRequest.Validate if the designated constraints
// aren't met.
type SubscribeBlockUpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeBlockUpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeBlockUpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeBlockUpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeBlockUpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeBlockUpdatesRequestValidationError) ErrorName() string {
	return "SubscribeBlockUpdatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeBlockUpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeBlockUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeBlockUpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeBlockUpdatesRequestValidationError{}

// Validate checks the field values on MaybePartialAccountUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaybePartialAccountUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaybePartialAccountUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaybePartialAccountUpdateMultiError, or nil if none found.
func (m *MaybePartialAccountUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *MaybePartialAccountUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Msg.(type) {

	case *MaybePartialAccountUpdate_PartialAccountUpdate:

		if all {
			switch v := interface{}(m.GetPartialAccountUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MaybePartialAccountUpdateValidationError{
						field:  "PartialAccountUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MaybePartialAccountUpdateValidationError{
						field:  "PartialAccountUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPartialAccountUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MaybePartialAccountUpdateValidationError{
					field:  "PartialAccountUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MaybePartialAccountUpdate_Hb:

		if all {
			switch v := interface{}(m.GetHb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MaybePartialAccountUpdateValidationError{
						field:  "Hb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MaybePartialAccountUpdateValidationError{
						field:  "Hb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MaybePartialAccountUpdateValidationError{
					field:  "Hb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MaybePartialAccountUpdateMultiError(errors)
	}

	return nil
}

// MaybePartialAccountUpdateMultiError is an error wrapping multiple validation
// errors returned by MaybePartialAccountUpdate.ValidateAll() if the
// designated constraints aren't met.
type MaybePartialAccountUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaybePartialAccountUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaybePartialAccountUpdateMultiError) AllErrors() []error { return m }

// MaybePartialAccountUpdateValidationError is the validation error returned by
// MaybePartialAccountUpdate.Validate if the designated constraints aren't met.
type MaybePartialAccountUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaybePartialAccountUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaybePartialAccountUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaybePartialAccountUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaybePartialAccountUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaybePartialAccountUpdateValidationError) ErrorName() string {
	return "MaybePartialAccountUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e MaybePartialAccountUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaybePartialAccountUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaybePartialAccountUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaybePartialAccountUpdateValidationError{}

// Validate checks the field values on Heartbeat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Heartbeat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Heartbeat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeartbeatMultiError, or nil
// if none found.
func (m *Heartbeat) ValidateAll() error {
	return m.validate(true)
}

func (m *Heartbeat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeartbeatMultiError(errors)
	}

	return nil
}

// HeartbeatMultiError is an error wrapping multiple validation errors returned
// by Heartbeat.ValidateAll() if the designated constraints aren't met.
type HeartbeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartbeatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartbeatMultiError) AllErrors() []error { return m }

// HeartbeatValidationError is the validation error returned by
// Heartbeat.Validate if the designated constraints aren't met.
type HeartbeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatValidationError) ErrorName() string { return "HeartbeatValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatValidationError{}

// Validate checks the field values on EmptyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyRequestMultiError, or
// nil if none found.
func (m *EmptyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyRequestMultiError(errors)
	}

	return nil
}

// EmptyRequestMultiError is an error wrapping multiple validation errors
// returned by EmptyRequest.ValidateAll() if the designated constraints aren't met.
type EmptyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyRequestMultiError) AllErrors() []error { return m }

// EmptyRequestValidationError is the validation error returned by
// EmptyRequest.Validate if the designated constraints aren't met.
type EmptyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRequestValidationError) ErrorName() string { return "EmptyRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRequestValidationError{}

// Validate checks the field values on BlockUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockUpdateMultiError, or
// nil if none found.
func (m *BlockUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slot

	// no validation rules for Blockhash

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BlockUpdateValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BlockUpdateValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BlockUpdateValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetBlockTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlockUpdateValidationError{
					field:  "BlockTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlockUpdateValidationError{
					field:  "BlockTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlockUpdateValidationError{
				field:  "BlockTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.BlockHeight != nil {
		// no validation rules for BlockHeight
	}

	if m.ExecutedTransactionCount != nil {
		// no validation rules for ExecutedTransactionCount
	}

	if m.EntryCount != nil {
		// no validation rules for EntryCount
	}

	if len(errors) > 0 {
		return BlockUpdateMultiError(errors)
	}

	return nil
}

// BlockUpdateMultiError is an error wrapping multiple validation errors
// returned by BlockUpdate.ValidateAll() if the designated constraints aren't met.
type BlockUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockUpdateMultiError) AllErrors() []error { return m }

// BlockUpdateValidationError is the validation error returned by
// BlockUpdate.Validate if the designated constraints aren't met.
type BlockUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockUpdateValidationError) ErrorName() string { return "BlockUpdateValidationError" }

// Error satisfies the builtin error interface
func (e BlockUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockUpdateValidationError{}

// Validate checks the field values on TimestampedBlockUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimestampedBlockUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampedBlockUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampedBlockUpdateMultiError, or nil if none found.
func (m *TimestampedBlockUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampedBlockUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimestampedBlockUpdateValidationError{
					field:  "Ts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimestampedBlockUpdateValidationError{
					field:  "Ts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampedBlockUpdateValidationError{
				field:  "Ts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBlockUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimestampedBlockUpdateValidationError{
					field:  "BlockUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimestampedBlockUpdateValidationError{
					field:  "BlockUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampedBlockUpdateValidationError{
				field:  "BlockUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimestampedBlockUpdateMultiError(errors)
	}

	return nil
}

// TimestampedBlockUpdateMultiError is an error wrapping multiple validation
// errors returned by TimestampedBlockUpdate.ValidateAll() if the designated
// constraints aren't met.
type TimestampedBlockUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimestampedBlockUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimestampedBlockUpdateMultiError) AllErrors() []error { return m }

// TimestampedBlockUpdateValidationError is the validation error returned by
// TimestampedBlockUpdate.Validate if the designated constraints aren't met.
type TimestampedBlockUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampedBlockUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampedBlockUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampedBlockUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampedBlockUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampedBlockUpdateValidationError) ErrorName() string {
	return "TimestampedBlockUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e TimestampedBlockUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampedBlockUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampedBlockUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampedBlockUpdateValidationError{}

// Validate checks the field values on TransactionUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionUpdateMultiError, or nil if none found.
func (m *TransactionUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slot

	// no validation rules for Signature

	// no validation rules for IsVote

	// no validation rules for TxIdx

	if all {
		switch v := interface{}(m.GetTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionUpdateValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionUpdateValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionUpdateValidationError{
				field:  "Tx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionUpdateMultiError(errors)
	}

	return nil
}

// TransactionUpdateMultiError is an error wrapping multiple validation errors
// returned by TransactionUpdate.ValidateAll() if the designated constraints
// aren't met.
type TransactionUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionUpdateMultiError) AllErrors() []error { return m }

// TransactionUpdateValidationError is the validation error returned by
// TransactionUpdate.Validate if the designated constraints aren't met.
type TransactionUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionUpdateValidationError) ErrorName() string {
	return "TransactionUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionUpdateValidationError{}

// Validate checks the field values on TimestampedTransactionUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimestampedTransactionUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampedTransactionUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampedTransactionUpdateMultiError, or nil if none found.
func (m *TimestampedTransactionUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampedTransactionUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimestampedTransactionUpdateValidationError{
					field:  "Ts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimestampedTransactionUpdateValidationError{
					field:  "Ts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampedTransactionUpdateValidationError{
				field:  "Ts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimestampedTransactionUpdateValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimestampedTransactionUpdateValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampedTransactionUpdateValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimestampedTransactionUpdateMultiError(errors)
	}

	return nil
}

// TimestampedTransactionUpdateMultiError is an error wrapping multiple
// validation errors returned by TimestampedTransactionUpdate.ValidateAll() if
// the designated constraints aren't met.
type TimestampedTransactionUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimestampedTransactionUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimestampedTransactionUpdateMultiError) AllErrors() []error { return m }

// TimestampedTransactionUpdateValidationError is the validation error returned
// by TimestampedTransactionUpdate.Validate if the designated constraints
// aren't met.
type TimestampedTransactionUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampedTransactionUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampedTransactionUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampedTransactionUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampedTransactionUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampedTransactionUpdateValidationError) ErrorName() string {
	return "TimestampedTransactionUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e TimestampedTransactionUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampedTransactionUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampedTransactionUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampedTransactionUpdateValidationError{}

// Validate checks the field values on SubscribeSlotUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeSlotUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeSlotUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeSlotUpdateRequestMultiError, or nil if none found.
func (m *SubscribeSlotUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeSlotUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribeSlotUpdateRequestMultiError(errors)
	}

	return nil
}

// SubscribeSlotUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by SubscribeSlotUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type SubscribeSlotUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeSlotUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeSlotUpdateRequestMultiError) AllErrors() []error { return m }

// SubscribeSlotUpdateRequestValidationError is the validation error returned
// by SubscribeSlotUpdateRequest.Validate if the designated constraints aren't met.
type SubscribeSlotUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeSlotUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeSlotUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeSlotUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeSlotUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeSlotUpdateRequestValidationError) ErrorName() string {
	return "SubscribeSlotUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeSlotUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeSlotUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeSlotUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeSlotUpdateRequestValidationError{}

// Validate checks the field values on SubscribeAccountUpdatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeAccountUpdatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeAccountUpdatesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SubscribeAccountUpdatesRequestMultiError, or nil if none found.
func (m *SubscribeAccountUpdatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeAccountUpdatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribeAccountUpdatesRequestMultiError(errors)
	}

	return nil
}

// SubscribeAccountUpdatesRequestMultiError is an error wrapping multiple
// validation errors returned by SubscribeAccountUpdatesRequest.ValidateAll()
// if the designated constraints aren't met.
type SubscribeAccountUpdatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeAccountUpdatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeAccountUpdatesRequestMultiError) AllErrors() []error { return m }

// SubscribeAccountUpdatesRequestValidationError is the validation error
// returned by SubscribeAccountUpdatesRequest.Validate if the designated
// constraints aren't met.
type SubscribeAccountUpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeAccountUpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeAccountUpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeAccountUpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeAccountUpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeAccountUpdatesRequestValidationError) ErrorName() string {
	return "SubscribeAccountUpdatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeAccountUpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeAccountUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeAccountUpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeAccountUpdatesRequestValidationError{}

// Validate checks the field values on SubscribeProgramsUpdatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeProgramsUpdatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeProgramsUpdatesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SubscribeProgramsUpdatesRequestMultiError, or nil if none found.
func (m *SubscribeProgramsUpdatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeProgramsUpdatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribeProgramsUpdatesRequestMultiError(errors)
	}

	return nil
}

// SubscribeProgramsUpdatesRequestMultiError is an error wrapping multiple
// validation errors returned by SubscribeProgramsUpdatesRequest.ValidateAll()
// if the designated constraints aren't met.
type SubscribeProgramsUpdatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeProgramsUpdatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeProgramsUpdatesRequestMultiError) AllErrors() []error { return m }

// SubscribeProgramsUpdatesRequestValidationError is the validation error
// returned by SubscribeProgramsUpdatesRequest.Validate if the designated
// constraints aren't met.
type SubscribeProgramsUpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeProgramsUpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeProgramsUpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeProgramsUpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeProgramsUpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeProgramsUpdatesRequestValidationError) ErrorName() string {
	return "SubscribeProgramsUpdatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeProgramsUpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeProgramsUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeProgramsUpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeProgramsUpdatesRequestValidationError{}

// Validate checks the field values on SubscribePartialAccountUpdatesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SubscribePartialAccountUpdatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribePartialAccountUpdatesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SubscribePartialAccountUpdatesRequestMultiError, or nil if none found.
func (m *SubscribePartialAccountUpdatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribePartialAccountUpdatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkipVoteAccounts

	if len(errors) > 0 {
		return SubscribePartialAccountUpdatesRequestMultiError(errors)
	}

	return nil
}

// SubscribePartialAccountUpdatesRequestMultiError is an error wrapping
// multiple validation errors returned by
// SubscribePartialAccountUpdatesRequest.ValidateAll() if the designated
// constraints aren't met.
type SubscribePartialAccountUpdatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribePartialAccountUpdatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribePartialAccountUpdatesRequestMultiError) AllErrors() []error { return m }

// SubscribePartialAccountUpdatesRequestValidationError is the validation error
// returned by SubscribePartialAccountUpdatesRequest.Validate if the
// designated constraints aren't met.
type SubscribePartialAccountUpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribePartialAccountUpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribePartialAccountUpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribePartialAccountUpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribePartialAccountUpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribePartialAccountUpdatesRequestValidationError) ErrorName() string {
	return "SubscribePartialAccountUpdatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribePartialAccountUpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribePartialAccountUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribePartialAccountUpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribePartialAccountUpdatesRequestValidationError{}

// Validate checks the field values on GetHeartbeatIntervalResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHeartbeatIntervalResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHeartbeatIntervalResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHeartbeatIntervalResponseMultiError, or nil if none found.
func (m *GetHeartbeatIntervalResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHeartbeatIntervalResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HeartbeatIntervalMs

	if len(errors) > 0 {
		return GetHeartbeatIntervalResponseMultiError(errors)
	}

	return nil
}

// GetHeartbeatIntervalResponseMultiError is an error wrapping multiple
// validation errors returned by GetHeartbeatIntervalResponse.ValidateAll() if
// the designated constraints aren't met.
type GetHeartbeatIntervalResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHeartbeatIntervalResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHeartbeatIntervalResponseMultiError) AllErrors() []error { return m }

// GetHeartbeatIntervalResponseValidationError is the validation error returned
// by GetHeartbeatIntervalResponse.Validate if the designated constraints
// aren't met.
type GetHeartbeatIntervalResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHeartbeatIntervalResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHeartbeatIntervalResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHeartbeatIntervalResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHeartbeatIntervalResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHeartbeatIntervalResponseValidationError) ErrorName() string {
	return "GetHeartbeatIntervalResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHeartbeatIntervalResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHeartbeatIntervalResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHeartbeatIntervalResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHeartbeatIntervalResponseValidationError{}

// Validate checks the field values on SlotEntryUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SlotEntryUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlotEntryUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SlotEntryUpdateMultiError, or nil if none found.
func (m *SlotEntryUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *SlotEntryUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slot

	// no validation rules for Index

	// no validation rules for ExecutedTransactionCount

	if len(errors) > 0 {
		return SlotEntryUpdateMultiError(errors)
	}

	return nil
}

// SlotEntryUpdateMultiError is an error wrapping multiple validation errors
// returned by SlotEntryUpdate.ValidateAll() if the designated constraints
// aren't met.
type SlotEntryUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlotEntryUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlotEntryUpdateMultiError) AllErrors() []error { return m }

// SlotEntryUpdateValidationError is the validation error returned by
// SlotEntryUpdate.Validate if the designated constraints aren't met.
type SlotEntryUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlotEntryUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlotEntryUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlotEntryUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlotEntryUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlotEntryUpdateValidationError) ErrorName() string { return "SlotEntryUpdateValidationError" }

// Error satisfies the builtin error interface
func (e SlotEntryUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlotEntryUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlotEntryUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlotEntryUpdateValidationError{}

// Validate checks the field values on TimestampedSlotEntryUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimestampedSlotEntryUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampedSlotEntryUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampedSlotEntryUpdateMultiError, or nil if none found.
func (m *TimestampedSlotEntryUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampedSlotEntryUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ts

	if all {
		switch v := interface{}(m.GetEntryUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimestampedSlotEntryUpdateValidationError{
					field:  "EntryUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimestampedSlotEntryUpdateValidationError{
					field:  "EntryUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntryUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampedSlotEntryUpdateValidationError{
				field:  "EntryUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimestampedSlotEntryUpdateMultiError(errors)
	}

	return nil
}

// TimestampedSlotEntryUpdateMultiError is an error wrapping multiple
// validation errors returned by TimestampedSlotEntryUpdate.ValidateAll() if
// the designated constraints aren't met.
type TimestampedSlotEntryUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimestampedSlotEntryUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimestampedSlotEntryUpdateMultiError) AllErrors() []error { return m }

// TimestampedSlotEntryUpdateValidationError is the validation error returned
// by TimestampedSlotEntryUpdate.Validate if the designated constraints aren't met.
type TimestampedSlotEntryUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampedSlotEntryUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampedSlotEntryUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampedSlotEntryUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampedSlotEntryUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampedSlotEntryUpdateValidationError) ErrorName() string {
	return "TimestampedSlotEntryUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e TimestampedSlotEntryUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampedSlotEntryUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampedSlotEntryUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampedSlotEntryUpdateValidationError{}

// Validate checks the field values on SubscribeSlotEntryUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeSlotEntryUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeSlotEntryUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SubscribeSlotEntryUpdateRequestMultiError, or nil if none found.
func (m *SubscribeSlotEntryUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeSlotEntryUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribeSlotEntryUpdateRequestMultiError(errors)
	}

	return nil
}

// SubscribeSlotEntryUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by SubscribeSlotEntryUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type SubscribeSlotEntryUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeSlotEntryUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeSlotEntryUpdateRequestMultiError) AllErrors() []error { return m }

// SubscribeSlotEntryUpdateRequestValidationError is the validation error
// returned by SubscribeSlotEntryUpdateRequest.Validate if the designated
// constraints aren't met.
type SubscribeSlotEntryUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeSlotEntryUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeSlotEntryUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeSlotEntryUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeSlotEntryUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeSlotEntryUpdateRequestValidationError) ErrorName() string {
	return "SubscribeSlotEntryUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeSlotEntryUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeSlotEntryUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeSlotEntryUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeSlotEntryUpdateRequestValidationError{}
